Optimizing Parameters with Simspark agents using Condor and CMA-ES
Patrick MacAlpine 
patmac@cs.utexas.edu
Created: March 8, 2010
Last Update: March 21, 2013

This document is a brief guide to using the Condor optimization framework with CMA that Yinon Bentor & Suyog Jain originally developed during the fall of 2009.  The framework has quite a few hacks, so this document may quickly become out of date as they are cleaned up (and you are encouraged to clean it up!)

Components:
 * Optimization agents that read parameters and output value functions.  See agents/nao-agent for an example.

 * CMA-ES code that generates initial parameters, reads in fitness functions, and generates new optimized parameters.  Lives in framework/cma.

 * Other algorithms for parameter optimization that haven't been as successful.  They live in other directories under frameworks/ (algorithms, policygradient, cross-ent, etc).

 * A script for performing an evaluation, including picking random agent and server ports, launching the simulator, launching the agent, performing the kickoff or drop-ball operation, and terminating the agent and simulator.  See agents/nao-agent/optimization/condor-run.sh.
 
 * The condor framework that launches condor jobs to evaluate parameters generated by CMA-ES on multiple machines.  This also performs basic averaging. Has some built-in robustness to evaluation failure by relaunching simulations that failed to produce an evaluation function.

Details of Operation:
 You'll need to run two executables at the same time for this: the condor script and the CMA-ES parameter generator.  They communicate by polling the filesystem for the existence of signal files, sleeping until the other one is complete.

 Each experiment has the following parameters:
  * Set of parameters to optimize: these are hard coded in the agent and in the CMA-ES code. In the agent, main.cc's LoadParams() function reads the parameters from a file specified by the --paramsfile parameter and makes them available through the map namedParams, which is extern'ed in various files.

  * A directory that houses experiment files, named on the command line.  If it doesn't exist, condor_run.rb will create it.

Instructions:

 1) Check out or update your SVN checkout of the entire tree, including the frameworks/ and agents/ directory.


 2) If you want to optimize a new Agent - you will have to:
 (*) Add a class similar to OptimizationBehaviorWalkFront (in optimizationbehaviors.h).
 (*) Update the run() function in main.cc - allocate it in response to cmd line param.
 (*) Copy nao-agent/optimization/sample_condor-run.sh to nao-agent/optimization/condor-run.sh
 (*) Update the --optimize <name> in nao-agent/optimization/condor-run.sh with the cmd-line name of your new agent
 (*) Update the "maxWaitTimeSec" value in nao-agent/optimization/condor-run.sh to the maximum number of seconds your optimization is allowed to run
    

 3) Skill descriptions are in nao-agent/skills directory. For each hardcoded value you want to optimize: 
    Change the hard-coded value to $<paramname>, and add <paramname> to the java code that define params (see next)


 4) In agents/nao-agent/optimization (or wherever your experiment agent is), run condor_run.sh locally, giving it a path to a parameter file as the first argument and the path to write a value file as the second argument. As mentioned above, you should also give it an optimization agent name (see possible names in run() in main.cc) inside the script, as a param to --optimize.  Verify that this behaves as expected.


Example:
(From inside the nao-agent dir:)
>> ./optimization/condor-run.sh ~/optimizationResults/results/params_15_i_105.txt /tmp/out.txt     


 5) In frameworks/cma, examine example_walkopt_input.txt.  This is an example of an input file you'll need to create for CMA-ES in which you specify parameter names, initial values, and initial sigmas.


 6) Compile the CMA code.  In frameworks/cma, issue this command:
     javac -cp java/ java/cma/CMAMain.java

 7) In frameworks/condor_run, examine sample_localconfig.rb.  You'll want to copy this file to localconfig.rb and you may wish to change the following variables:
     a. $run_path -- this should point to your condor-run.sh script from step 2.
     b. $minJobs and $minCondorJobs -- these control how the framework re-evaluates failed runs
     c. $maxWaitTime -- maximum amount of time to wait between any jobs finishing before all jobs are killed off 
                        (set this to the maximum amount of time you ever expect a job to take to finish)
    Don't add or check in your localconfig.rb file to SVN -- each user will likely want their own customized one. 

To run:
 1) In frameworks/condor_run/, execute:
      > condor_run.rb experiment_path num_iter pop_size avg_runs
    Where experiment_path is on a shared filesystem.  This will output that it's waiting on paramswritten_1.txt every 5 seconds.

 2) In a separate window, cd to frameworks/cma and execute:
      > java -cp java cma.CMAMain experiment_path num_iter pop_size input_file
    Where experiment_path, num_iter, and pop_size are set to the same values as in condor_run.
    (This step will go away, see TODO)

    You can also start CMA-ES where it left off from a previous run using the "-c" argument for continue.
      > java -cp java cma.CMAMain experiment_path num_iter -c iter_to_contine_from
    Be sure to set the $startIter variable in localconfig.rb to the iteration you're continuing from as well.

 3) Watch with glee, hopefully not too much horror.


File structure:
 The experiment path will contain two directories:
    process/ -- empty, unless you uncomment condor_run.rb's Out= and Error= lines to output STDERR and STDOUT to a file.  Warning: this gets big fast!

    results/ -- where most of the experiment takes place

    Inside results, there are five kinds of files:
      params_[iter]_i_[ind].txt - contains parameters for the [ind] member of the [iter] iteration. These are written by the CMA-ES code.

      run_[iter]_i_[ind]_r_[run].txt - the fitness function value, as outputted by the agent
      
      value_[iter]_i_[ind].txt  - the average fitness function value for a set of parameters, as outputted by the agent

      paramswritten_[iter].txt  - an empty file written by the CMA-ES framework when it has written out the params file for the [iter] iteration.  condor_run.rb polls for this every few seconds when it is waiting on CMA-ES.

      valuationdone_[iter].txt  - an empty file written by the condor_run.rb script after all condor jobs have returned, signaling CMA_ES to generate the next set of parameters.  CMA-ES polls for this file every few seconds when it is waiting on evaluations to complete.


TODO:
  * Have condor_run launch CMA-ES in the background so only one command starts the experiment
  * Find good values for $minJobs and $minCondorJobs to prevent more than 1 retry of each parameter set.
